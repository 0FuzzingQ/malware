#-*- coding: UTF-8 -*-
import random
import math
import sys
reload(sys)
sys.setdefaultencoding('utf8')

'''use as python rsa.py -p √˜ŒƒŒƒº˛¬∑æ∂ -c √‹ŒƒŒƒº˛¬∑æ∂'''        

def divisor(a,b):
        tmp=max(a,b)%min(a,b)
        if tmp==0:
                return min(a,b)
        else:
                return divisor(min(a,b),tmp)

def egcd(a, b):
    if b == 0:
        return a, 1, 0
    else:
        g, x, y = egcd(b, a % b)
        return g, y, x - a / b * y

def is_sushu(count):
    c=int(math.sqrt(count))
    for i in range (2,c+1):
        if count%i==0:
            return False
    return True

def create_key():
    M_list=[]
    S_list=[]
    result_list=[]
    
    while True:
        p=random.randint(10000000000,99999999999)
        q=random.randint(10000000000,99999999999)
        if is_sushu(p) and is_sushu(q):
            break
    n=p*q
    fn=(p-1)*(q-1)
    while True:
        e=random.randint(2,65535)
        if divisor(e,fn)==1:
            break
    d0,d,d1=egcd(e,fn)
    
    
    f=open('p.txt','w')
    f.write(hex(p))
    f.close()
    f=open('q.txt','w')
    f.write(hex(q))
    f.close()
    f=open('n.txt','w')
    f.write(hex(n))
    f.close()
    f=open('e.txt','w')
    f.write(hex(e))
    f.close()
    f=open('d.txt','w')
    f.write(hex(d))
    f.close()

    

    M=ReadM(sys.argv[2])
    print "√˜Œƒ ˝æ›:"
    print M
    length=len(M)
    line=length/16+1
    for i in range(0,line):
    	M_list.append(M[i*16:i*16+16])
    	if i==11:
    		M_list[i]=M[i*16:i*16+16]+'0'*(line*16-length)  
    
    print "√˜Œƒ∑÷◊ÈΩ·π˚:"
    print M_list
    			
    for i in range(0,line):
    	S_list.append(pow(int(M_list[i],16),e,n))
    print "∑÷◊Èº”√‹Ω·π˚:"
    print S_list
    
    f=open(sys.argv[4],'w')
    buffer=''
    for i in range(0,line):
    	buffer=buffer+hex(int(S_list[i]))[2:-1]
    f.write(buffer)
    f.close()

def ReadM(file_path):
    f=open(file_path,'r')
    if f:
        content=f.read()
        content=content.encode('hex')
        return content
    else:
        print 'fail'
    f.close()



create_key()
