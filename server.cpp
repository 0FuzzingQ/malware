#include "windows.h"
#include "stdio.h"
#include "stdlib.h"
#include <string>
#include <iostream>
#pragma comment(lib,"ws2_32.lib")
using namespace std;


main()
{
	fflush(stdin);
	SOCKET clientsocket;
	WSADATA wsadata;
	WORD sockversion = MAKEWORD(2,2);
	
	if(WSAStartup(sockversion,&wsadata)!=0)
	{
		return 0;
	}
	
	SOCKET serversocket = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
	if(serversocket == SOCKET_ERROR)
	{
		printf("socket error");
		return 0;
	}
	sockaddr_in sin;
	sin.sin_family = AF_INET;
	sin.sin_addr.S_un.S_addr = inet_addr("127.0.0.1");
	sin.sin_port = htons(8888);
	if(bind(serversocket,(LPSOCKADDR)&sin,sizeof(sin)) == SOCKET_ERROR)
	{
		printf("bind error");
		return 0;
	}
	if(listen(serversocket,5) == SOCKET_ERROR)
	{
		printf("listen error");
		return 0;
	}
    clientsocket = accept(serversocket,NULL,NULL);
	char buff[256] = {0};
	char cmd[256] = {0};
	char result[4096] = {0};
	char *help = "-h [help] -s [shell] -u filename path [upload] -d filepath downpath [download] -e [exit]\n";
	int len = recv(clientsocket,buff,256,NULL);
	puts(buff);
	puts(help);
	while(1)
	{
		memset(cmd,0,256);
		printf(">>:");
		gets(cmd);
		string tmp = cmd;
		send(clientsocket,cmd,strlen(cmd),0);
		if(strcmp(cmd,"-e") == 0)
		{
			printf("success exit!\n");
			closesocket(clientsocket);
			closesocket(serversocket);
			return 0;
		}
		else if(strncmp(cmd,"-u",2) == 0)
		{
			char filebuff[4096] = {0};
			DWORD readlen;
			
			char path[100]; 
			strcpy(path,tmp.substr(tmp.find(" ")+1,tmp.rfind(" ")-2).c_str());
			FILE *f = fopen(path,"r+");
			puts(path);
			fflush(stdin);
			fread(filebuff,1,4096,f);
			puts(filebuff);
			send(clientsocket,filebuff,strlen(filebuff),0);
			fclose(f);
		}
		else if(strncmp(cmd,"-d",2) == 0)
		{
			char filebuff[4096] = {0};
			DWORD readlen;
			char path[100];
			strcpy(path,tmp.substr(tmp.rfind(" ")+1,tmp.length()-1).c_str());
			FILE *f = fopen(path,"w+");
			//puts(path);
			readlen = recv(clientsocket,filebuff,4096,NULL);
			fflush(stdin);
			fwrite(filebuff,1,strlen(filebuff),f);
			fclose(f);
		}
		else
		{
			//send(clientsocket,cmd,strlen(cmd),0);
			int recvlen;
			recvlen = recv(clientsocket,result,4096,NULL);
			/*if(recvlen == SOCKET_ERROR)
			{
				printf("recv error");
				break;
			}*/
			puts(result);
		}
		
		memset(result,0,4096);
	}
}







